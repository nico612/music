//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `Color_Red`.
    var color_Red: RswiftResources.ColorResource { .init(name: "Color_Red", path: [], bundle: bundle) }

    /// Color `Color_block_0.5`.
    var color_block_05: RswiftResources.ColorResource { .init(name: "Color_block_0.5", path: [], bundle: bundle) }

    /// Color `Color_blue`.
    var color_blue: RswiftResources.ColorResource { .init(name: "Color_blue", path: [], bundle: bundle) }

    /// Color `Color_cover_bg`.
    var color_cover_bg: RswiftResources.ColorResource { .init(name: "Color_cover_bg", path: [], bundle: bundle) }

    /// Color `Color_primary`.
    var color_primary: RswiftResources.ColorResource { .init(name: "Color_primary", path: [], bundle: bundle) }

    /// Color `Color_white`.
    var color_white: RswiftResources.ColorResource { .init(name: "Color_white", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 10 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Logo`.
    var logo: RswiftResources.ImageResource { .init(name: "Logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Placeholder`.
    var placeholder: RswiftResources.ImageResource { .init(name: "Placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PlaceholderError`.
    var placeholderError: RswiftResources.ImageResource { .init(name: "PlaceholderError", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide1`.
    var guide1: RswiftResources.ImageResource { .init(name: "guide1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide2`.
    var guide2: RswiftResources.ImageResource { .init(name: "guide2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide3`.
    var guide3: RswiftResources.ImageResource { .init(name: "guide3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide4`.
    var guide4: RswiftResources.ImageResource { .init(name: "guide4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide5`.
    var guide5: RswiftResources.ImageResource { .init(name: "guide5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splashBanner`.
    var splashBanner: RswiftResources.ImageResource { .init(name: "splashBanner", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splashLogo`.
    var splashLogo: RswiftResources.ImageResource { .init(name: "splashLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `CommonAlertViewController`.
    var commonAlertViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CommonAlertViewController", bundle: bundle) }

    /// Nib `GuideViewController`.
    var guideViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GuideViewController", bundle: bundle) }

    /// Nib `HomeViewController`.
    var homeViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HomeViewController", bundle: bundle) }

    /// Nib `SplashViewController`.
    var splashViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SplashViewController", bundle: bundle) }

    /// Nib `TermServiceDialogVC`.
    var termServiceDialogVC: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TermServiceDialogVC", bundle: bundle) }

    func validate() throws {
      if UIKit.UIColor(named: "Color_Red", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color_Red' is used in nib 'CommonAlertViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color_primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color_primary' is used in nib 'GuideViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color_white' is used in nib 'GuideViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color_blue' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "splashBanner", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splashBanner' is used in nib 'SplashViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "splashLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splashLogo' is used in nib 'SplashViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color_Red", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color_Red' is used in nib 'TermServiceDialogVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color_white' is used in nib 'TermServiceDialogVC', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "Logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}